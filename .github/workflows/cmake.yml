name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Setup C/C++ Compiler
      # You may pin to the exact commit or the version.
      # uses: rlalik/setup-cpp-compiler@06fe9cc0d7e8c7ea1702d497f0892430c34914ef
      uses: rlalik/setup-cpp-compiler@v1.1
    
    - name: Configure
      run: sudo apt-get install -y libfreetype6-dev libfreetype6 libfontconfig1-dev libgl1-mesa-dev libasound2-dev doxygen liblua5.1-0-dev
      
    - name: Configure ClanLib
      run: git clone https://github.com/sphair/ClanLib.git && cd ClanLib && git checkout 3.0-stable && ./autogen.sh && ./configure && sudo make install --silent && cd ..

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
